#!/bin/bash
#mysql-backup
#provadi mysql dumpy zvolenych databazi
#version 1.1


#LIST _PROMENNE _EXITY _LOGOVANI _PODMINKY _KONFIGURACE _ZALOHA


#_PROMENNE
scriptName="mysql-backup"
backupDir="/var/backup/mysql"
backupLimit=14
todayDateTime="$(date +%F_%H-%M)"
mysqlPassword="EMPTY"


if [ -z "$scriptDir" ]
then

	#v pripade, ze je script spousten ze slozky pracovni, nastavi se mu jine cesty, nez pri spusteni pres cron
	if [ "$(echo $PWD | grep -c pracovni)" -eq 0 ] && [ "$(echo $0 | grep -c pracovni)" -eq 0 ]	
	then

		#cesta ke scriptu
		scriptDir="/usr/local/scripty"
		verbose=0
	else

		#cesta ke scriptu
		scriptDir="/usr/local/scripty/pracovni"
		verbose=1
		deBug=1
	fi  
fi


#_EXITY
#exit 1		#disablovany script
#exit 2		#spatne nastavena nektera z promennych


#_LOGOVANI

#nacteni definice funkci Log,LogError,RvLog,MailSend z knihovny
. $scriptDir/funkce	
Log "script ($scriptName) - zacatek"
echo "$$" > "$startFile"
Log "($startFile) set to ($$)"

#konfigurace pro soubor s heslem
mysqlDefaultsFile="$configDir/.my.cnf"


#funkce pro zapis souboru pro mysqldump
write_mysqlDefaultsFile()
{
	{
		echo "[mysql]"
		echo "user=root"
		echo "password='$mysqlPassword'"
		echo ""
		echo "[mysqldump]"
		echo "user=root"
		echo "password='$mysqlPassword'"
	} > "$mysqlDefaultsFile"
	chmod 600 "$mysqlDefaultsFile"

	if [ -f "$configFile" ]
	then
		#odstranit radky z configFile
		sed -i -e 's/mysqlUser.*//g' "$configFile"
		sed -i -e 's/mysqlPassword.*//g' "$configFile"
		sed -i -e 's/backupItems.*//g' "$configFile"
	fi
}


#_KONFIGURACE
#zapise konfiguracni soubor, ze ktereho bude nasledne nacitat hodnoty
write(){
	if [ -f "$configFile" ]
	then
		cp "$configFile" "${configFile}.back"
		RvLog "provedena zaloha konfigurace do (${configFile}.back)"
	fi
	{
	echo "disabled=1		#vypne/zapne (1/0) provadeni scriptu"
	echo "backupLimit=14		#nastavuje, kolik zaloh zpetne se bude drzet"
	echo "recipient=\"\"		#zapsat email pro posilani erroru, pokud je prazdne, logy stejne chodi na vaclavz@comarr.cz"
	} > "$configFile"
	LogError "zapsan konfiguracni soubor pro server ($HOSTNAME)"
	write_mysqlDefaultsFile
}



#pokud neni konfiguracni soubor, nebo byl predan parametr -c
if [ ! -f "$configFile" ] || [ "$1" = "-c" ]
then
	write
	MailSend
	exit 10
fi

if [ -f "$configFile" ]
then
	. "$configFile"
	Log "nacten konfiguracni soubor ($configFile)"
else
	write
	. "$configFile"
fi


#nastavenim disabled na 1 se vypne spousteni scriptu, uprav $configFile, mail se neposila
if [ "$disabled" -eq 1 ]
then
	Log "script ($scriptName) byl disablovan v konfiguracnim souboru ($configFile)"
	MailSend
	exit 1
fi


#kontrola existence mysqlDefaultsFile, pripadne vytvoreni z existujiciho configu
#v pripade prazdneho hesla zaloguje error
if [ ! -f "$mysqlDefaultsFile" ] && [ -n "$mysqlPassword" ]
then
	write_mysqlDefaultsFile
else
	if [ -z "$mysqlPassword" ]
	then
		LogError "Promenna mysqlPassword je prazdna, je nutne nastavit heslo do mysql databaze v [$mysqlDefaultsFile]"
		write_mysqlDefaultsFile
		MailSend
		exit 12
	fi
fi


#kontrola, zda mysqlPassword neobsahuje EMPTY
if [ $(grep -c "EMPTY" "$mysqlDefaultsFile") -ne 0 ]
then
	LogError "POZOR, neni nastaveno heslo pro mysql-backup v [$mysqlDefaultsFile]"
	MailSend
	exit 13
fi


#_ZALOHA
#zkontroluje slozku pro zalohy
CheckDir "$backupDir"
#vyliti uzivatelu z mysql vcetne opravneni - uklada se do slozky /var/backup/mysql/mysql/user-export-datum-cas.sql
#naleva se to mysql --defaults-extra-file=/usr/local/etc/.my.cnf -A < user-export-*.sql
mysql --defaults-extra-file=/usr/local/etc/.my.cnf -B -N -e\
	"SELECT DISTINCT CONCAT('SHOW GRANTS FOR \'', user, '\'@\'', host, '\';') AS query FROM mysql.user" |\
	mysql --defaults-extra-file=/usr/local/etc/.my.cnf |\
	sed -e 's/\(GRANT .*\)/\1;/;s/^\(Grants for .*\)/## \1 ##/;/##/{x;p;x;}' -e 's/\\\\/\\/g' |\
	grep -v "root" > "$backupDir"/mysql/user-export-"${todayDateTime}".sql
RvLog "Zaloha uzivatelu a opravneni z mysql databaze"

#nactou se vsechny databaze, ktere nemaji v nazvu Database nebo _schema
backupItems=$(mysql --defaults-file="$mysqlDefaultsFile" -s -e "show databases;" | grep -v "Database" | grep -v "_schema" | tr '\n' ' ')
RvLog "nacteni databazi pro zalohovani"
#ze seznamu databazi oddeleneho mezerou se vytvori pole
backupARRAY=($(echo "$backupItems"))
RvLog "nastaveno pole backupARRAY, pocet databazi pro zalohovani je (${#backupARRAY[@]})"

#kontroluje, zda pole neni prazdne, coz nesmi nastat nikdy. Databaze mysql je vzdy pritomna.
backupArrayLength=${#backupARRAY[@]}
if [ "$backupArrayLength" -eq 0 ]
then
	LogError "POZOR - nacteny seznam databazi je prazdny"
fi


for database in ${backupARRAY[@]}
do
	backupName="$database-${todayDateTime}"
	backupPath="$backupDir/$database"
	CheckDir "$backupDir/$database"
	#doplneny parametry -e -F --routines
	#-e extended-insert - viceradkove inserty = mensi dump a rychlejsi naliti
	#-F flush-logs
	#--routines - dumpuje i funkce, rutiny a dalsi chujoviny
	mysqldump --defaults-extra-file="$mysqlDefaultsFile" "$database" -e -F --routines -r "$backupPath/${backupName}.sql" > /dev/null
	RvLog "Vytvoren mysqldump databaze s nazvem ($backupPath/${backupName}.sql)"

	if [ "$?" -eq 0 ] && cd "$backupPath"
	then
		#-T otestuje archiv a --move po uspesnem testu soubor smaze
		zip -T -m "${backupName}.zip" "${backupName}.sql" > /dev/null
		RvLog "mysqldump uspesne zkomprimovan (${backupName}.zip)"
	fi

	#kontroluje, zda pocet zaloh neni mensi nez backuplimit - pokud prestane zalohovat, tak nesmi mazat stare
	if [ $(find "$backupPath" -name "*.zip" | wc -l) -gt "$backupLimit" ]
	then
		#odstraneni zaloh starsich nez $backupLimit
		find "$backupPath" -type f -mtime +"$backupLimit" -exec rm {} \;
		RvLog "odstraneni starych zaloh z ($backupPath)"
	fi
done


MailSend
exit 0
