#!/bin/bash
#era-mysql-backup
#provadi mysql dumpy databaze ERA serveru
#version 1.0


#LIST _PROMENNE _EXITY _LOGOVANI _PODMINKY _KONFIGURACE _ZALOHA


#_PROMENNE
scriptName="era-mysql-backup"
backupPath="/var/backup/era"
backupLimit=14
database="era_db"
todayDate="$(date +%F)"
todayDateTime="$(date +%F_%H-%M)"


#definice funkci pro logovani behu programu a posilani vystupu mailem
#_LIST #_Log #_LogError #_RvLog #_MailSend #_CheckDir 
#_TestDir #_RemoveDir #_RecreateDir


scripty="/usr/local/scripty"

#nastaveni verbose vystupu = 1
verbose=0

#slouzi pro initialize a script-downloader, urcuje, zda se pri dalsim stazeni spusti i initialize
version=2		

#slozka, kde jsou konfiguracni soubory k jednotlivym scriptum
configDir="/usr/local/etc"

#konfiguracni soubor pro konkretni script
configFile="$configDir/${scriptName}.conf"

#slozka, kde jsou .err soubory a soubor messages pro scripty
logDir="/var/log"

#souboru, kam se loguje vse
logFile="$logDir/scripty.log"

#souboru, kam se loguji vystupy programu ve scriptu vse
outputFile="$logDir/scripty-output.log"

#slozka, kde jsou .pid soubory pro jednotlive bezici procesy + .start .stop soubory
#ktere slouzi pro detekci spusteni a dokonceni scriptu
pidDir="/var/spool/scripty"

#zacatek scriptu, obsahuje pid procesu pri spusteni, slouzi pro kontrolu beziciho procesu
startFile="$pidDir/${scriptName}.start"

#konec scriptu
stopFile="$pidDir/${scriptName}.stop"

#errorFile je prazdny soubor, slouzi pouze pro indikaci pripadnych erroru	
errorFile="$pidDir/${scriptName}.err"

#soubor, ktery oznacuje spusteny script, maze se ve funkci MailSend
runFile="$pidDir/${scriptName}.run"

#soubor obsahujici pid beziciho logovaciho loopu
pidFile="$pidDir/${scriptName}.pid"

#soubor obsahujici pid defaultniho logovaciho loopu
defaultPid="$pidDir/default.pid"

#slozka kde se vytvareji named pipe
pipeDir="$pidDir/pipe"	

#named pipe pro logovani erroru
pipeFile="$pipeDir/$scriptName"	

#named pipe pro logovani beznych vystupu
defaultPipe="$pipeDir/default"

#soubor, ktery zpusobi debug vystupy
debugFile="$scripty/debug"



#pokud existuje debugFile, zapne verbose vystupy
if [ -f "$debugFile" ]
then
	export deBug=1
else
	export deBug=0
fi



#pokud od minule zustal soubor $errorFile, tak ho odstrani
if [ -e "$errorFile" ]
then
	rm "$errorFile"
fi


#prida datum na konec outputFile
echo -e "\n\nstart time: $(date +%F_%H-%M)" >> "$outputFile"


#_Log
Log(){
	#provede zapis predaneho parametru do logu (/var/log/scripty), pri verbose to hrne i na screen
	if [ "$verbose" -eq 1 ]
	then
		echo "$(date '+%b %d %T') $HOSTNAME $scriptName: Log - $1" | tee -a "$logFile"
	else
		echo "$(date '+%b %d %T') $HOSTNAME $scriptName: Log - $1" >> "$logFile"
	fi
}


#_LogError
LogError(){
	#provede ERROR zapis predaneho parametru do logu s nazvnem scriptu v (/var/log/scripty)
	if [ "$verbose" -eq 1 ]
	then
#		echo "$(date '+%b %d %T') $HOSTNAME $scriptName: ERROR - $1" >> "$logDir/${scriptName}.err"
		echo "$(date '+%b %d %T') $HOSTNAME $scriptName: Error - $1" | tee -a "$logFile"
		touch "$errorFile"
	else
#		echo "$(date '+%b %d %T') $HOSTNAME $scriptName: ERROR - $1" >> "$logDir/${scriptName}.err"
		echo "$(date '+%b %d %T') $HOSTNAME $scriptName: Error - $1" >> "$logFile"
		touch "$errorFile"
	fi
}


#_RvLog
RvLog(){
	#provede kontrolu navratove hodnoty, v pripade, ze je 0, provede zalogovani predaneho parametru
	rv="$?"
	if [ "$rv" -eq 0 ]
	then
		[ "$deBug" -eq 1 ] && Log "RvLog - [$1]"
	else
		LogError "RvLog - [$1] navratova hodnota ($rv)"
	fi
	return "$rv"
}



#_MailSend
MailSend(){
	#posle errory z prubehu, pokud se nejake zapsaly do $errorFile
	
	#odstranuje vzdy, krome pripadu,  kdy je predan parametr keep
	#ten se predava pouze pri kontrole pomoci funkce TestRunFile()
	#je to ochrana pred pripadnym smazanim runFile u stale beziciho scriptu
	if [ "$1" != "keep" ]
	then

		#odstrani runFile, pri volani MailSend, jelikoz po nem vzdy nasleduje exit
		#s vyjimkou parametru keep
		[ -f "$runFile" ] && rm "$runFile"
		RvLog "odstraneni runFile ($runFile)"
	fi

	if [ -e "$errorFile" ]
	then
		defaultRecipient="poruchy@comarr.eu"
		LogError "MailSend - script ($scriptName) - nastaly problemy, posilam mailem vystup"
		cat "$logFile" | grep "$scriptName" | mail -s "SCRIPT ERROR - ($scriptName) - ($HOSTNAME)"\
			"$defaultRecipient" "$recipient"
		return 11
	else
		touch "$stopFile"
		RvLog "script ($scriptName) dokoncen bez erroru"
		return 0
	fi
}


#_CheckDir
#zkontroluje zda existuje slozka predana jako parametr, pokud ne, tak ji vytvori
CheckDir(){
	if [ -d "$1" ]
	then
		RvLog "CheckDir - slozka $1 existuje"
		return 0
	else
		mkdir -p "$1"
		RvLog "CheckDir - vytvoreni slozky $1"
		return "$?"
	fi
}

#otestuje potrebne slozky
CheckDir "$configDir"
CheckDir "$pidDir"
CheckDir "$pipeDir"
CheckDir "$scripty"


#_TestDir
#zkontroluje, zda existuje predana slozka, pokud ne, loguje error
TestDir() {
	if [ ! -e "$1" ]
	then
		LogError "TestDir - slozka ($1) neexistuje"
	fi
}


#_RemoveDir
#zkontroluje, zda existuje slozka predana jako parametr, pokud ano, tak ji smaze i s obsahem
RemoveDir(){
	if [ -d "$1" ]
	then
		rm -rf "$1"
		RvLog "RemoveDir - odstraneni slozky $1"
	fi
}


#_RecreateDir
#slouzi pro odstraneni a znovuvytvoreni slozky
RecreateDir(){
	RemoveDir "$1"
	sleep 1
	CheckDir "$1"
}

#_TestRunFile
#slouzi pro kontrolu, zda neexistuje runFile, pokud existuje, ukonci script
#pokud neexistuje, tak ho vytvori
TestRunFile()
{
	#kontrola, zda script nebezi od minule
	if [ -f "$runFile" ]
	then
		scriptPid=$(cat "$startFile")

		#zkontroluje pid puvodniho procesu
		if [ $(ps -p "$scriptPid" | grep -c "$scriptName") -eq 0 ]
		then

			#pokud uz na pidu script nebezi, spusti se normalne
			touch "$runFile"
			:
			LogError "($scriptPid) neodpovida ($scriptName), ignoruje se stary run soubor ($runFile)"
		else

			#pokud na pidu stale bezi puvodni proces, skonci a nic nedela
			LogError "script ($scriptName) stale bezi ($scriptPid), nelze spoustet dvakrat ($scriptName) - ($runFile)"
			MailSend "keep"
			exit 6
		fi
	else
		touch "$runFile"
		Log "zaznamenan zacatek scriptu ($scriptName) - ($runFile)"
	fi
}

TestRunFile

Log "script ($scriptName) - zacatek"
echo "$$" > "$startFile"
Log "($startFile) set to ($$)"

#konfigurace pro soubor s heslem
mysqlDefaultsFile="$configDir/.era-my.cnf"
mysqlPassword=$(grep "Password=" /etc/opt/eset/RemoteAdministrator/Server/StartupConfiguration.ini | cut -d'{' -f 2 | cut -d'}' -f1)

#smazani .era-my.cnf, pokud je v ni uzivatel root
if [ $(grep -c "user=root" "$mysqlDefaultsFile") -ne 0 ]
then
	rm "$mysqlDefaultsFile"
	RvLog "Odstranen konfiguracni soubor pro overeni databaze era-mysql-backup kvuli rootovi"
fi

#funkce pro zapis souboru pro mysqldump
write_mysqlDefaultsFile()
{
	{
		echo "[mysql]"
		echo "user=era"
		echo "password='$mysqlPassword'"
		echo ""
		echo "[mysqldump]"
		echo "user=era"
		echo "password='$mysqlPassword'"
	} > "$mysqlDefaultsFile"
	chmod 600 "$mysqlDefaultsFile"

	if [ -f "$configFile" ]
	then
		#odstranit radky z configFile
		sed -i -e 's/mysqlUser.*//g' "$configFile"
		sed -i -e 's/mysqlPassword.*//g' "$configFile"
		sed -i -e 's/backupItems.*//g' "$configFile"
	fi
}


#_KONFIGURACE
#zapise konfiguracni soubor, ze ktereho bude nasledne nacitat hodnoty
write(){
	if [ -f "$configFile" ]
	then
		cp "$configFile" "${configFile}.back"
		RvLog "provedena zaloha konfigurace do (${configFile}.back)"
	fi
	{
	echo "disabled=1		#vypne/zapne (1/0) provadeni scriptu"
	echo "backupLimit=14		#nastavuje, kolik zaloh zpetne se bude drzet"
	echo "recipient=\"tomasa@comarr.cz\"		#zapsat email pro posilani erroru, pokud je prazdne, logy stejne chodi na vaclavz@comarr.cz"
	} > "$configFile"
	LogError "zapsan konfiguracni soubor pro server ($HOSTNAME)"
	write_mysqlDefaultsFile
}


#pokud neni konfiguracni soubor, nebo byl predan parametr -c
if [ ! -f "$configFile" ] || [ "$1" = "-c" ]
then
	write
	MailSend
	exit 10
fi

if [ -f "$configFile" ]
then
	. "$configFile"
	Log "nacten konfiguracni soubor ($configFile)"
else
	write
	. "$configFile"
fi


#nastavenim disabled na 1 se vypne spousteni scriptu, uprav $configFile, mail se neposila
if [ "$disabled" -eq 1 ]
then
	Log "script ($scriptName) byl disablovan v konfiguracnim souboru ($configFile)"
	MailSend
	exit 1
fi


#kontrola existence mysqlDefaultsFile, pripadne vytvoreni z existujiciho configu
#v pripade prazdneho hesla zaloguje error
if [ ! -f "$mysqlDefaultsFile" ] && [ -n "$mysqlPassword" ]
then
	write_mysqlDefaultsFile
else
	if [ -z "$mysqlPassword" ]
	then
		LogError "Promenna mysqlPassword je prazdna, je nutne nastavit heslo do mysql databaze v [$mysqlDefaultsFile]"
		write_mysqlDefaultsFile
		MailSend
		exit 12
	fi
fi


#kontrola, zda mysqlPassword neobsahuje EMPTY
#pokud ano, tak ho odstrani a necha ho zapsat znovu s nactenym heslem do databaze
if [ $(grep -c "EMPTY" "$mysqlDefaultsFile") -ne 0 ]
then
	rm "$mysqlDefaultsFile"
	write_mysqlDefaultsFile
fi


#_ZALOHA
backupName="$database-${todayDate}"
backupNameSql="$database-${todayDateTime}.sql"
CheckDir "$backupPath"
mysqldump --defaults-extra-file="$mysqlDefaultsFile" --disable-keys --extended-insert --routines "$database" -r "$backupPath/$backupNameSql" > /dev/null
RvLog "Vytvoren mysqldump databaze s nazvem ($backupPath/$backupNameSql)"

if [ "$?" -eq 0 ] && cd "$backupPath"
then
	#-T otestuje archiv a --move po uspesnem testu soubor smaze
	zip -T -m "${backupName}.zip" "$backupNameSql" > /dev/null
	RvLog "mysqldump uspesne zkomprimovan (${backupName}.zip)"
fi

#kontroluje, zda pocet zaloh neni mensi nez backuplimit - pokud prestane zalohovat, tak nesmi mazat stare
if [ $(find "$backupPath" -name "*.zip" | wc -l) -gt "$backupLimit" ]
then
	#odstraneni zaloh starsich nez $backupLimit
	find "$backupPath" -type f -mtime +"$backupLimit" -exec rm {} \;
	RvLog "odstraneni starych zaloh z ($backupPath)"
fi


MailSend
exit 0
