#!/bin/bash
#postgresql-backup
#provadi postgresql dumpy zvolenych databazi
#version 1.0


#LIST _PROMENNE _EXITY _LOGOVANI _PODMINKY _KONFIGURACE _ZALOHA


#_PROMENNE
scriptName="postgresql-backup"
todayDate="$(date +%F)"
todayDateTime="$(date +%F_%H-%M)"


if [ -z "$scriptDir" ]
then

	#v pripade, ze je script spousten ze slozky pracovni, nastavi se mu jine cesty, nez pri spusteni pres cron
	if [ "$(echo $PWD | grep -c pracovni)" -eq 0 ] && [ "$(echo $0 | grep -c pracovni)" -eq 0 ]	
	then

		#cesta ke scriptu
		scriptDir="/usr/local/scripty"
		verbose=0
	else

		#cesta ke scriptu
		scriptDir="/usr/local/scripty/pracovni"
		verbose=1
		deBug=1
	fi  
fi


#_EXITY
#exit 1		#disablovany script
#exit 2		#spatne nastavena nektera z promennych


#_LOGOVANI

#nacteni definice funkci Log,LogError,RvLog,MailSend z knihovny
. $scriptDir/funkce	
Log "script ($scriptName) - zacatek"
echo "$$" > "$startFile"
Log "($startFile) set to ($$)"

#_KONFIGURACE
#zapise konfiguracni soubor, ze ktereho bude nasledne nacitat hodnoty
write(){
	if [ -f "$configFile" ]
	then
		cp "$configFile" "${configFile}.back"
		RvLog "provedena zaloha konfigurace do (${configFile}.back)"
	fi
	{
	echo "#vypne/zapne (1/0) provadeni scriptu"
	echo "disabled=1"
	echo "#nastavuje, kolik zaloh zpetne se bude drzet"
	echo "backupLimit=14"
	echo "#uzivatel, pod kterym se budou provadet dumpy... v pripade vice databazi musi byt postgres"
	echo "postgresqlUser=\"postgres\""
	echo "#heslo uzivatele pro postgresql"
	echo "postgresqlPassword=\"\""
	echo "#nastaveni cesty, kam se ukladaji zalohy"
	echo "backupDir=\"\""
	} > "$configFile"
	LogError "zapsan konfiguracni soubor pro server ($HOSTNAME)"
}



#nacte konfiguracni soubor
if [ -f "$configFile" ]
then
	. "$configFile"
	Log "nacten konfiguracni soubor ($configFile)"
else
	write
	. "$configFile"
fi


#nastavenim disabled na 1 se vypne spousteni scriptu, uprav $configFile, mail se neposila
if [ "$disabled" -eq 1 ]
then
	Log "script ($scriptName) byl disablovan v konfiguracnim souboru ($configFile)"
	MailSend
	exit 1
fi


#kontrola nastaveni promennych 
if [ -z "$backupLimit" ] || [ -z "$postgresqlUser" ] || [ -z "$postgresqlPassword" ] || [ -z "$backupDir" ]
then
	LogError "nebyla nastavena nektera z promennych backupLimit=($backupLimit), postgresqlUser=($postgresqlUser), postgresqlPassword=($postgresqlPassword), backupDir=($backupDir)"
	MailSend
	exit 2
else
	export PGPASSWORD="$postgresqlPassword"

	#zkontroluje, zda neni PGPASSWORD prazdna, pokud je, tak je spatne nastavene heslo v configu
	if [ -z "$PGPASSWORD" ]
	then
		LogError "vyexportovana promenna PGPASSWORD neni nastavena na zadnou hodnotu, nutno nastavit v ($configFile)"
		MailSend
		exit 2
	fi
fi


#_ZALOHA
#vycteni databazi z postgresql do pole
#-w se nepta na heslo, ale musi byt nastavena promenna PGPASSWORD
#-At vynecha kudrlinky
#-c prikaz predany postgresql
backupARRAY=($(psql -U"$postgresqlUser" -w -At -c "select datname from pg_database where not datistemplate and datallowconn order by datname;"))
RvLog "nastaveno pole backupARRAY (${backupARRAY[@]})"


#provede dumpy vsech existujicich databazi
for database in ${backupARRAY[@]}
do
	backupName="$database-${todayDateTime}.zip"
	backupNameSql="$database-${todayDateTime}.sql"
	backupPath="$backupDir/$database/$todayDate"
	CheckDir "$backupPath"
	#provede dump databaze
	pg_dump -U"$postgresqlUser" -w "$database" --file="$backupPath/$backupNameSql" > /dev/null
	RvLog "Vytvoren postgresql-dump databaze s nazvem ($backupPath/$backupNameSql)"

	if [ "$?" -eq 0 ] && cd "$backupPath"
	then
		#-T otestuje archiv a --move po uspesnem testu soubor smaze
		zip -T --move "$backupName" "$backupNameSql" > /dev/null
		RvLog "postgresql-dump uspesne zkomprimovan ($backupName)"
	fi

	#odstraneni zaloh starsich nez $backupLimit
	find "$backupDir/$database" -maxdepth 1 -mindepth 1 -type d -mtime +"$backupLimit" -exec rm -rf {} \;
	RvLog "odstraneni starych zaloh z ($backupPath)"

done

unset PGPASSWORD

MailSend
exit 0
