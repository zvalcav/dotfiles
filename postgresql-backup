#!/bin/bash
#postgresql-backup
#provadi postgresql dumpy zvolenych databazi

VERSION_MAJOR=1
VERSION_MINOR=0
VERSION_PATCH=2
VERSION="$VERSION_MAJOR.$VERSION_MINOR.$VERSION_PATCH"

#LIST
#_PROMENNE
#_EXITY
#_LOGOVANI
#_PODMINKY
#_KONFIGURACE
#_POSTGRESQL_BACKUP_CRON
#_ZALOHA

# zajisti, ze pri selhani jednoho prikazu v pipe selze cela pipe
set -o pipefail

# pri predani parametru -x provede zapnuti debug logu
if [ "$1" = "-x" ]
then
	set -x
fi

# vypsani verze
if [ "$1" = "-V" -o "$1" = "--version" ]
then
	echo "$VERSION"
	exit 0
fi

#_PROMENNE
scriptName="postgresql-backup"
backupDir="/var/backup/postgresql"
backupLimit=14
todayDate="$(date +%F)"
todayDateTime="$(date +%F_%H-%M)"

scriptDir="/usr/local/bash-scripts"
verbose=0
deBug=0

#_EXITY
#exit 1		#disablovany script
#exit 2		#spatne nastavena nektera z promennych


#_LOGOVANI

#nacteni definice funkci Log,LogError,RvLog,MailSend z knihovny
. $scriptDir/funkce	
Log "script ($scriptName) - zacatek"
echo "$$" > "$startFile"
Log "($startFile) set to ($$)"

#_KONFIGURACE
#zapise konfiguracni soubor, ze ktereho bude nasledne nacitat hodnoty
write(){
	if [ -f "$configFile" ]
	then
		cp "$configFile" "${configFile}.back"
		RvLog "provedena zaloha konfigurace do (${configFile}.back)"
	fi
	{
	echo "#vypne/zapne (1/0) provadeni scriptu"
	echo "disabled=1"
	echo "#nastavuje, kolik zaloh zpetne se bude drzet"
	echo "backupLimit=14"
	echo "#uzivatel, pod kterym se budou provadet dumpy... v pripade vice databazi musi byt postgres"
	echo "postgresqlUser=\"postgres\""
	echo "#heslo uzivatele pro postgresql"
	echo "postgresqlPassword=\"\""
	} > "$configFile"
	LogError "zapsan konfiguracni soubor pro server ($HOSTNAME)"
}


#_POSTGRESQL_BACKUP_CRON
#pokud neni zaznam pro postgresql-backup
if [ ! -e /etc/cron.d/postgresql-backup ]
then
	#vytvori radek, ktery spousti dany script ve 2:00 a kompletni debug vystup se uklada do souboru ve /var/log
	{ 
		echo "#denni spousteni postgresql-backup"
		echo "0 1 * * * root $sbinDir/postgresql-backup &>$outputFile"
	} > /etc/cron.d/postgresql-backup
	RvLog "zapsano spousteni postgresql-backup scriptu do cronu"
fi


#nacte konfiguracni soubor
if [ -f "$configFile" ]
then
	. "$configFile"
	Log "nacten konfiguracni soubor ($configFile)"
else
	write
	. "$configFile"
fi


#nastavenim disabled na 1 se vypne spousteni scriptu, uprav $configFile, mail se neposila
if [ "$disabled" -eq 1 ]
then
	Log "script ($scriptName) byl disablovan v konfiguracnim souboru ($configFile)"
	MailSend
	exit 1
fi


#kontrola nastaveni promennych 
if [ -z "$backupLimit" ] || [ -z "$postgresqlUser" ] || [ -z "$backupDir" ]
then
	LogError "nebyla nastavena nektera z promennych backupLimit=($backupLimit),\n
						postgresqlUser=($postgresqlUser), postgresqlPassword=($postgresqlPassword), backupDir=($backupDir)"
	MailSend
	exit 2
else
	export PGPASSWORD="$postgresqlPassword"
fi


#_ZALOHA
#vycteni databazi z postgresql do pole
#-w se nepta na heslo, ale musi byt nastavena promenna PGPASSWORD
#-At vynecha kudrlinky
#-c prikaz predany postgresql
backupARRAY=($(psql -U"$postgresqlUser" -w -At\
	-c "select datname from pg_database where not datistemplate and datallowconn order by datname;"))
RvLog "nastaveno pole backupARRAY (${backupARRAY[@]})"


#provede dumpy vsech existujicich databazi
for database in ${backupARRAY[@]}
do
	backupNameSql="$database-${todayDateTime}.sql"
	backupName="$backupNameSql.gz"
	backupPath="$backupDir/$database/$todayDate"
	CheckDir "$backupPath"

	#provede dump databaze s vynechanim tabulek v partitions - pro moznost rychle obnovy
	if [[ "$database" =~ "zabbix" ]]
	then
		backupBasicName="schema-$backupName"
		backupHistoryName="history-$backupName"

		# pokud nazev databaze obsahuje zabbix, provede dump s vynechanim parititions tabulek pro history a trends
		# sed provede okomentovani radku, ktere sahaji na plpgsql extension a gzip soubor zabali
		pg_dump -U"$postgresqlUser"  -T 'partitions.*' -w "$database" | sed -e 's/^\(CREATE\ EXTENSION\|COMMENT\ ON\ EXTENSION\)/--&/g' | gzip > "$backupPath/$backupBasicName"
		RvLog "Vytvoren postgresql-dump databaze s nazvem ($backupPath/$backupBasicName)"

		# nacte navratovou hodnotu - funkce RvLog ji vraci
		rv="$?"

		# separatni dump historie a trendu
		pg_dump -U"$postgresqlUser"  -t 'partitions.*' -w "$database" | sed -e 's/^\(CREATE\ EXTENSION\|COMMENT\ ON\ EXTENSION\)/--&/g' | gzip > "$backupPath/$backupHistoryName"
		RvLog "Vytvoren postgresql-dump databaze s nazvem ($backupPath/$backupHistoryName)"

		# okomentuje radky obsahujici upravy plpgsql extension, aby bylo mozne obnovovat pod uzivatelem zabbix
		# pri obnovovani pomoci pg_restore to neni potreba, ale pri volani pres psql ano - uzivatel nema prava
		#sed -e 's/^\(CREATE\ EXTENSION\|COMMENT\ ON\ EXTENSION\)/--&/g' -i  "$backupPath/backupBasicName"

		Log "Zalohu lze obnovit pomoci:"
		Log "systemctl stop zabbix-server apache2"
		Log "psql -U postgres"
		Log "drop database zabbix;"
		Log "create database zabbix with owner=zabbix;"
		Log "gunzip -c $backupPath/$backupBasicName | psql -U zabbix -d zabbix -v ON_ERROR_STOP=1"
		# pro obnoveni historie a trendu se rozbali plna zaloha rovnou na vstup psql - na errorech nezastavuje
		Log "gunzip -c $backupPath/$backupHistoryName | psql -U zabbix -d zabbix"
		Log "systemctl start zabbix-server apache2"
	# nezabixove databaze dumpne zvlast
	else
		# bezne zalohovani bez vynechavani - vcetne pripadne databaze zabbixu
		pg_dump -U"$postgresqlUser" -w "$database" | gzip > "$backupPath/$backupName"

		RvLog "Vytvoren postgresql-dump databaze s nazvem ($backupPath/$backupName)"

		# nacte navratovou hodnotu - funkce RvLog ji vraci
		rv="$?"
	fi

	# pokud byl dump uspesny - prohleda slozky pro prislusnou databazi a vymaze stare zalohy
	if [ "$rv" -eq 0 ] && cd "$backupPath"
	then
		#odstraneni zaloh starsich nez $backupLimit
		find "$backupDir/$database" -maxdepth 1 -mindepth 1 -type d -mtime +"$backupLimit" -exec rm -rf {} \;
		RvLog "odstraneni starych zaloh z ($backupPath)"
	fi
done

unset PGPASSWORD

MailSend
exit 0
