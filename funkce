#!/bin/bash
#verze 1.0.1
#logovani 
#definice funkci pro logovani behu programu a posilani vystupu mailem
#_LIST #_Log #_LogError #_RvLog #_MailSend #_CheckDir 
#_TestDir #_RemoveDir #_RecreateDir


scripty="/usr/local/bash-scripts"
sbinDir="/usr/local/sbin"

#nastaveni verbose vystupu, pokud jeste nebyl nastaven 
if [ -z "$verbose" ]
then
	verbose=0
fi

#slouzi pro initialize a script-downloader, urcuje, zda se pri dalsim stazeni spusti i initialize
version=2		

#slozka, kde jsou konfiguracni soubory k jednotlivym scriptum
configDir="/usr/local/etc"

#konfiguracni soubor pro konkretni script
configFile="$configDir/${scriptName}.conf"

#slozka, kde jsou .err soubory a logy z jednotlivych scriptu
logDir="/var/log/scripty"

#souboru, kam se loguje vse
logFile="$logDir/${scriptName}.log"

#souboru, kam se loguji vystupy programu ve scriptu vse
outputFile="$logDir/${scriptName}-output.log"

#slozka, kde jsou .pid soubory pro jednotlive bezici procesy + .start .stop soubory
#ktere slouzi pro detekci spusteni a dokonceni scriptu
pidDir="/var/spool/scripty"

#zacatek scriptu, obsahuje pid procesu pri spusteni, slouzi pro kontrolu beziciho procesu
startFile="$pidDir/${scriptName}.start"

#konec scriptu
stopFile="$pidDir/${scriptName}.stop"

#errorFile je prazdny soubor, slouzi pouze pro indikaci pripadnych erroru	
errorFile="$pidDir/${scriptName}.err"

#soubor, ktery oznacuje spusteny script, maze se ve funkci MailSend
runFile="$pidDir/${scriptName}.run"

#soubor obsahujici pid beziciho logovaciho loopu
pidFile="$pidDir/${scriptName}.pid"

#soubor obsahujici pid defaultniho logovaciho loopu
defaultPid="$pidDir/default.pid"

#slozka kde se vytvareji named pipe
pipeDir="$pidDir/pipe"	

#named pipe pro logovani erroru
pipeFile="$pipeDir/$scriptName"	

#named pipe pro logovani beznych vystupu
defaultPipe="$pipeDir/default"


#pokud od minule zustal soubor $errorFile, tak ho odstrani
if [ -e "$errorFile" ]
then
	rm "$errorFile"
fi


#_Log
Log(){
	#provede zapis predaneho parametru do logu (/var/log/scripty), pri verbose to hrne i na screen
	if [ "$verbose" -eq 1 ]
	then
#		logger -s -p local0.info -t "$scriptName - OK" "$1"
		echo "$(date '+%b %d %T') $HOSTNAME $scriptName: LOG - $1" | tee -a "$logFile"
	else
#		logger -p local0.info -t "$scriptName - OK" "$1"
		echo "$(date '+%b %d %T') $HOSTNAME $scriptName: LOG - $1" >> "$logFile"
	fi
}


#_LogError
LogError(){
	#provede ERROR zapis predaneho parametru do logu s nazvnem scriptu v (/var/log/scripty)
	if [ "$verbose" -eq 1 ]
	then
		echo "$(date '+%b %d %T') $HOSTNAME $scriptName: ERROR - $1" | tee -a "$logFile"
		touch "$errorFile"
	else
		echo "$(date '+%b %d %T') $HOSTNAME $scriptName: ERROR - $1" >> "$logFile"
		touch "$errorFile"
	fi
}


#_RvLog
RvLog(){
	#provede kontrolu navratove hodnoty, v pripade, ze je 0, provede zalogovani predaneho parametru
	rv="$?"
	if [ "$rv" -eq 0 ]
	then
		Log "[$1] rv=[$rv]"
	else
		LogError "[PROBLEM: $1] rv=[$rv]"
	fi
	return "$rv"
}


#_MailSend
MailSend(){
	#posle errory z prubehu, pokud se nejake zapsaly do $errorFile - pouze z duvodu kompatibility a 
	# pouziti ve vsech scriptech - maily neposila - jen loguje
	
	#odstranuje vzdy, krome pripadu,  kdy je predan parametr keep
	#ten se predava pouze pri kontrole pomoci funkce TestRunFile()
	#je to ochrana pred pripadnym smazanim runFile u stale beziciho scriptu
	if [ "$1" != "keep" ]
	then

		#odstrani runFile, pri volani MailSend, jelikoz po nem vzdy nasleduje exit
		#s vyjimkou parametru keep
		[ -f "$runFile" ] && rm "$runFile"
		RvLog "odstraneni runFile ($runFile)"
	fi

	if [ -e "$errorFile" ]
	then
		LogError "MailSend - script ($scriptName) - nastaly problemy"
		return 11
	else
		touch "$stopFile"
		RvLog "STOP - OK - script ($scriptName) dokoncen bez erroru"
		return 0
	fi
}


#_CheckDir
#zkontroluje zda existuje slozka predana jako parametr, pokud ne, tak ji vytvori
CheckDir(){
	if [ -d "$1" ]
	then
		RvLog "CheckDir - slozka $1 existuje"
		return 0
	else
		mkdir -p "$1"
		RvLog "CheckDir - vytvoreni slozky $1"
		return "$?"
	fi
}


#_TestDir
#zkontroluje, zda existuje predana slozka, pokud ne, loguje error
TestDir() {
	if [ ! -e "$1" ]
	then
		LogError "TestDir - slozka ($1) neexistuje"
	fi
}


#_RemoveDir
#zkontroluje, zda existuje slozka predana jako parametr, pokud ano, tak ji smaze i s obsahem
RemoveDir(){
	if [ -d "$1" ]
	then
		rm -rf "$1"
		RvLog "RemoveDir - odstraneni slozky $1"
	fi
}


#_RecreateDir
#slouzi pro odstraneni a znovuvytvoreni slozky
RecreateDir(){
	RemoveDir "$1"
	sleep 1
	CheckDir "$1"
}

#_TestRunFile
#slouzi pro kontrolu, zda neexistuje runFile, pokud existuje, ukonci script
#pokud neexistuje, tak ho vytvori
TestRunFile()
{
	#kontrola, zda script nebezi od minule
	if [ -f "$runFile" ]
	then
		scriptPid=$(cat "$startFile")

		#zkontroluje pid puvodniho procesu
		if [ $(ps -p "$scriptPid" | grep -c "$scriptName") -eq 0 ]
		then

			#pokud uz na pidu script nebezi, spusti se normalne
			touch "$runFile"
			:
			LogError "($scriptPid) neodpovida ($scriptName), ignoruje se stary run soubor ($runFile)"
		else

			#pokud na pidu stale bezi puvodni proces, skonci a nic nedela
			LogError "script ($scriptName) stale bezi ($scriptPid), nelze spoustet dvakrat ($scriptName) - ($runFile)"
			MailSend "keep"
			exit 6
		fi
	else
		touch "$runFile"
		Log "START - OK - zaznamenan zacatek scriptu ($scriptName) - ($runFile)"
	fi
}

# kontrola existence slozky pro logovani
CheckDir "$logDir"

#prida datum na konec outputFile
echo -e "\n\nstart time: $(date +%F_%H-%M)" >> "$outputFile"

TestRunFile
