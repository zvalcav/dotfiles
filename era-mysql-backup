#!/bin/bash
#era-mysql-backup
#provadi mysql dumpy databaze ERA serveru
#version 1.0


#LIST _PROMENNE _EXITY _LOGOVANI _PODMINKY _KONFIGURACE _ZALOHA


#_PROMENNE
scriptName="era-mysql-backup"
backupPath="/var/backup/era"
backupLimit=14
database="era_db"
todayDate="$(date +%F)"
todayDateTime="$(date +%F_%H-%M)"


if [ -z "$scriptDir" ]
then

	#v pripade, ze je script spousten ze slozky pracovni, nastavi se mu jine cesty, nez pri spusteni pres cron
	if [ "$(echo $PWD | grep -c pracovni)" -eq 0 ] && [ "$(echo $0 | grep -c pracovni)" -eq 0 ]	
	then

		#cesta ke scriptu
		scriptDir="/usr/local/scripty"
		verbose=0
	else

		#cesta ke scriptu
		scriptDir="/usr/local/scripty/pracovni"
		verbose=1
		deBug=1
	fi  
fi


#_EXITY
#exit 1		#disablovany script
#exit 2		#spatne nastavena nektera z promennych


#_LOGOVANI

#nacteni definice funkci Log,LogError,RvLog,MailSend z knihovny
. $scriptDir/funkce	
Log "script ($scriptName) - zacatek"
echo "$$" > "$startFile"
Log "($startFile) set to ($$)"

#konfigurace pro soubor s heslem
mysqlDefaultsFile="$configDir/.era-my.cnf"
mysqlPassword=$(grep "Password=" /etc/opt/eset/RemoteAdministrator/Server/StartupConfiguration.ini | cut -d'{' -f 2 | cut -d'}' -f1)

#smazani .era-my.cnf, pokud je v ni uzivatel root
if [ $(grep -c "user=root" "$mysqlDefaultsFile") -ne 0 ]
then
	rm "$mysqlDefaultsFile"
	RvLog "Odstranen konfiguracni soubor pro overeni databaze era-mysql-backup kvuli rootovi"
fi

#funkce pro zapis souboru pro mysqldump
write_mysqlDefaultsFile()
{
	{
		echo "[mysql]"
		echo "user=era"
		echo "password='$mysqlPassword'"
		echo ""
		echo "[mysqldump]"
		echo "user=era"
		echo "password='$mysqlPassword'"
	} > "$mysqlDefaultsFile"
	chmod 600 "$mysqlDefaultsFile"

	if [ -f "$configFile" ]
	then
		#odstranit radky z configFile
		sed -i -e 's/mysqlUser.*//g' "$configFile"
		sed -i -e 's/mysqlPassword.*//g' "$configFile"
		sed -i -e 's/backupItems.*//g' "$configFile"
	fi
}


#_KONFIGURACE
#zapise konfiguracni soubor, ze ktereho bude nasledne nacitat hodnoty
write(){
	if [ -f "$configFile" ]
	then
		cp "$configFile" "${configFile}.back"
		RvLog "provedena zaloha konfigurace do (${configFile}.back)"
	fi
	{
	echo "disabled=1		#vypne/zapne (1/0) provadeni scriptu"
	echo "backupLimit=14		#nastavuje, kolik zaloh zpetne se bude drzet"
	echo "recipient=\"tomasa@comarr.cz\"		#zapsat email pro posilani erroru, pokud je prazdne, logy stejne chodi na vaclavz@comarr.cz"
	} > "$configFile"
	LogError "zapsan konfiguracni soubor pro server ($HOSTNAME)"
	write_mysqlDefaultsFile
}


#pokud neni konfiguracni soubor, nebo byl predan parametr -c
if [ ! -f "$configFile" ] || [ "$1" = "-c" ]
then
	write
	MailSend
	exit 10
fi

if [ -f "$configFile" ]
then
	. "$configFile"
	Log "nacten konfiguracni soubor ($configFile)"
else
	write
	. "$configFile"
fi


#nastavenim disabled na 1 se vypne spousteni scriptu, uprav $configFile, mail se neposila
if [ "$disabled" -eq 1 ]
then
	Log "script ($scriptName) byl disablovan v konfiguracnim souboru ($configFile)"
	MailSend
	exit 1
fi


#kontrola existence mysqlDefaultsFile, pripadne vytvoreni z existujiciho configu
#v pripade prazdneho hesla zaloguje error
if [ ! -f "$mysqlDefaultsFile" ] && [ -n "$mysqlPassword" ]
then
	write_mysqlDefaultsFile
else
	if [ -z "$mysqlPassword" ]
	then
		LogError "Promenna mysqlPassword je prazdna, je nutne nastavit heslo do mysql databaze v [$mysqlDefaultsFile]"
		write_mysqlDefaultsFile
		MailSend
		exit 12
	fi
fi


#kontrola, zda mysqlPassword neobsahuje EMPTY
#pokud ano, tak ho odstrani a necha ho zapsat znovu s nactenym heslem do databaze
if [ $(grep -c "EMPTY" "$mysqlDefaultsFile") -ne 0 ]
then
	rm "$mysqlDefaultsFile"
	write_mysqlDefaultsFile
fi


#_ZALOHA
backupName="$database-${todayDate}"
backupNameSql="$database-${todayDateTime}.sql"
CheckDir "$backupPath"
mysqldump --defaults-extra-file="$mysqlDefaultsFile" --disable-keys --extended-insert --routines "$database" -r "$backupPath/$backupNameSql" > /dev/null
RvLog "Vytvoren mysqldump databaze s nazvem ($backupPath/$backupNameSql)"

if [ "$?" -eq 0 ] && cd "$backupPath"
then
	#-T otestuje archiv a --move po uspesnem testu soubor smaze
	zip -T -m "${backupName}.zip" "$backupNameSql" > /dev/null
	RvLog "mysqldump uspesne zkomprimovan (${backupName}.zip)"
fi

#kontroluje, zda pocet zaloh neni mensi nez backuplimit - pokud prestane zalohovat, tak nesmi mazat stare
if [ $(find "$backupPath" -name "*.zip" | wc -l) -gt "$backupLimit" ]
then
	#odstraneni zaloh starsich nez $backupLimit
	find "$backupPath" -type f -mtime +"$backupLimit" -exec rm {} \;
	RvLog "odstraneni starych zaloh z ($backupPath)"
fi


MailSend
exit 0
