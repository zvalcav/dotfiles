#!/bin/bash
#server-backup
#provadi zalohovani serveru - kopiruje nastavene adresare do nastavene slozky pro zalohovani

VERSION_MAJOR=1
VERSION_MINOR=0
VERSION_PATCH=0
VERSION="$VERSION_MAJOR.$VERSION_MINOR.$VERSION_PATCH"

#LIST
#_PROMENNE
#_EXITY
#_LOGOVANI
#_PODMINKY
#_KONFIGURACE
#_SERVER_BACKUP_CRON
#_PROMENNE_PRO_ZALOHOVANI
#_KONTROLA_SLOZEK_PRO_ZALOHU
#_DAILY
#_WEEKLY
#_MONTHLY
#_COPY

# pri predani parametru -x provede zapnuti debug logu
if [ "$1" = "-x" ]
then
	set -x
fi

# vypsani verze
if [ "$1" = "-V" -o "$1" = "--version" ]
then
	echo "$VERSION"
	exit 0
fi

#_PROMENNE
scriptName="server-backup"
backupDir="/var/backup"
defaultList="/root/.ssh /root/.bash_history /root/.histfile_zsh /root/bin /etc /var/spool/cron /usr/local/etc"

#cesta ke scriptu
scriptDir="/usr/local/bash-scripts"
verbose=0
deBug=0


#_LOGOVANI

#nacteni definice funkci Log,LogError,RvLog,MailSend z knihovny
. "$scriptDir"/funkce 
Log "script ($scriptName) - zacatek"
echo "$$" > "$startFile"
Log "($startFile) set to ($$)"


#_KONFIGURACE
#zapise konfiguracni soubor, ze ktereho bude nasledne nacitat hodnoty
write(){
	if [ -f "$configFile" ]
	then
		cp "$configFile" "${configFile}.back"
		RvLog "provedena zaloha konfigurace do (${configFile}.back)"
	fi	
	{
	echo "backupLimit=7	#pocet zaloh, ktere se budou drzet zpetne"
	echo "backupItems=\"\"	#seznam absolutnich cest oddeleny mezerou"
	echo "disabled=0	#povoli/zakaze (0/1) spousteni scriptu"
	} > "$configFile"
	LogError "zapsan konfiguracni soubor pro server ($HOSTNAME)"
}


#_SERVER_BACKUP_CRON
#pokud neni zaznam pro server-backup
if [ ! -e /etc/cron.d/server-backup ]
then
	#vytvori radek, ktery spousti dany script ve 20:00 a kompletni debug vystup se uklada do souboru ve /var/log
	{ 
		echo "#denni spousteni server-backup"
		echo "0 22 * * * root $sbinDir/server-backup &>$outputFile"
	} > /etc/cron.d/server-backup
	RvLog "zapsano spousteni server-backup scriptu do cronu roota"
fi


#nacteni $configFile, pripadne exit
if [ -f "$configFile" ]
then
	. "$configFile"
	Log "nacten konfiguracni soubor ($configFile)"
else
	write
	. "$configFile"
fi


#_PROMENNE_PRO_ZALOHOVANI
#kontrola nastaveni promenne backupLimit
if [ -z "$backupLimit" ]
then
	backupLimit=7
	LogError "neni nastavena promenna backupLimit v souboru ($configFile)"
fi



#kontrola nastaveni promenne $backupItems
if [ -z "$backupItems" ]
then
	backupList="$defaultList"
	Log "backupList=($backupList)"
else
	backupList="$backupItems $defaultList"
	Log "backupList=($backupList)"
fi


#rotace zaloh se provadi pres date odectenim promenne $backupLimit
dayNo="$(date +%Y.%m.%d)"
dayName="$HOSTNAME-${dayNo}.tgz"
weekNo="$(date +%Y-%V)"
weekName="$HOSTNAME-${weekNo}.tgz"
monthNo="$(date +%Y.%m)"
monthName="$HOSTNAME-${monthNo}.tgz"


Log "kontrola potrebnych slozek"


#_KONTROLA_SLOZEK_PRO_ZALOHU
#zkontroluje potrebne slozky, pripadne je vytvori
CheckDir "$backupDir/day"
CheckDir "$backupDir/week"
CheckDir "$backupDir/month"
CheckDir "$backupDir/copy"

#slouzi pro vimove backupy
RemoveDir "$backupDir/vim"  
CheckDir "/root/scripty"


Log "dokoncena kontrola potrebnych slozek"


#_DAILY
Log "denni zaloha"

#zkontroluje, zda uz zaloha existuje
if [ "$(find $backupDir/day -type f -name $dayName | wc -l)" -eq 0 ]
then
	Log "vytvarim aktualni denni zalohu ($dayName)"
	tar cpzf "$backupDir"/day/"$dayName" $backupList 2> /dev/null
	RvLog "tar - vytvorena denni komprimovana zaloha ($dayName)"
	find "$backupDir"/day -type f -mtime "+$backupLimit" -exec rm {} \;
	RvLog "find daily - odstraneni zaloh starsich nez ($backupLimit) dni"
	Log "vytvorena denni zaloha ($dayName)"
else
	Log "nalezena aktualni denni zaloha ($dayName)"
fi


#_WEEKLY
Log "tydenni zaloha"
if [ "$(find $backupDir/week -type f -name $weekName | wc -l)" -eq 0 ]
then
	ln "$backupDir"/day/"$dayName" "$backupDir"/week/"$weekName"
	Log "vytvorena aktualni tydenni zaloha ($weekName)"
else
	Log "nalezena aktualni tydenni zaloha ($weekName)"
	find "$backupDir"/week -type f -mtime "+$(($backupLimit*3))" -exec rm {} \;
	RvLog "find weekly - odstraneni tydennich zaloh starsich nez [$(($backupLimit*3))] dni"
fi


#_MONTHLY
Log "mesicni zaloha"
if [ "$(find $backupDir/month -type f -name $monthName | wc -l)" -eq 0 ]
then
	RecreateDir "$backupDir/copy"
	ln "$backupDir"/day/"$dayName" "$backupDir"/month/"$monthName"
	Log "vytvorena aktualni mesicni zaloha ($monthName)"
else
	Log "nalezena aktualni mesicni zaloha ($monthName)"
	find "$backupDir"/month -type f -mtime "+$(($backupLimit*15))" -exec rm {} \;
	RvLog "find monthly - odstraneni mesicnich zaloh starsich nez [$(($backupLimit*15))] dni"
fi


#_COPY
Log "zacinam kopirovat nekomprimovane soubory"
for l_cpArray in $(echo "$backupList")
do
	cp --archive --update --recursive --parents "$l_cpArray" "$backupDir/copy/"
	RvLog "cp ($l_cpArray)"
done
Log "kopirovani dokonceno"


MailSend
exit 0
